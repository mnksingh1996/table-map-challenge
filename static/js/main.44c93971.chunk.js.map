{"version":3,"sources":["constants/Theme.js","shared/Map/index.js","shared/Table/styles.js","shared/Table/index.js","constants/GlobalStyles.js","constants/MapDarkStyle.js","app/styles.js","app/index.js","serviceWorker.js","index.js","assets/sprite.svg"],"names":["colors","dark__green","medium__green","light__green","sea__green","dark__grey","light__grey","dark__yellow","light__yellow","black","dark__blue","light__blue","theme","primary","secondary","Marker","text","fill","xlinkHref","Sprite","MapComponent","style","height","width","bootstrapURLKeys","key","process","defaultCenter","this","props","center","defaultZoom","zoom","options","lat","lng","Component","defaultProps","styles","border_collapse","css","cellPadding","TableContainer","styled","div","Table","table","Row","tr","TableHead","thead","TableBody","tbody","TableHeadCell","th","TableCell","td","TableComponent","GlobalStyles","createGlobalStyle","mapStyles","elementType","stylers","color","featureType","Header","header","Main","main","Footer","footer","theme_options","Object","keys","Theme","App","useState","current_theme","set_theme","Map","MapDarkStyle","value","onChange","e","target","map","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.44c93971.chunk.js","sourcesContent":["const colors = {\n  dark__green: \"#80c464\",\n  medium__green: \"#a7c941\",\n  light__green: \"#ebf2d3\",\n  sea__green: \"#00968a\",\n  dark__grey: \"#929bac\",\n  light__grey: \"#f4f5f7\",\n  dark__yellow: \"#fff2cd\",\n  light__yellow: \"#fff8e5\",\n  black: \"#1f1f1f\",\n  dark__blue: \"#0079d6\",\n  light__blue: \"#7fbce9\"\n};\n\nconst theme = {\n  primary: { ...colors },\n  secondary: { ...colors, dark__grey: \"#000000\" }\n};\n\nexport default theme;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\n\nimport Sprite from \"../../assets/sprite.svg\";\n\nconst Marker = ({ text }) => (\n  <div>\n    {text}\n    <svg fill=\"red\">\n      <use xlinkHref={`${Sprite}#icon-location2`} />\n    </svg>\n  </div>\n);\n\nclass MapComponent extends Component {\n  static defaultProps = {\n    center: {\n      lat: 28.7041,\n      lng: 77.1025\n    },\n    zoom: 11,\n    options: {\n      styles: {}\n    }\n  };\n\n  render() {\n    return (\n      <div style={{ height: \"50vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: process.env.REACT_APP_MAPS_API_KEY }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n          options={this.props.options}\n        >\n          <Marker lat={28.7041} lng={77.1025} text=\"Delhi Marker\" />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default MapComponent;\n","import styled, { css } from \"styled-components\";\n\n// Utilities Start\n\nconst border_collapse = css`\n  border: 2px solid ${props => props.theme.medium__green};\n  border-collapse: collapse;\n`;\n\nconst cellPadding = css`\n  padding: 10px;\n`;\n\n// Utilities End\n\n// Table Start\n\nexport const TableContainer = styled.div`\n  width: 100%;\n`;\n\nexport const Table = styled.table`\n  width: 50%;\n  margin-top: 20px;\n  text-align: left;\n  ${border_collapse};\n`;\n\nexport const Row = styled.tr``;\n\nexport const TableHead = styled.thead`\n  color: white;\n  background-color: ${props => props.theme.medium__green};\n`;\n\nexport const TableBody = styled.tbody`\n  ${Row} {\n    &:nth-child(odd) {\n      background-color: ${props => props.theme.light__yellow};\n    }\n\n    &:nth-child(even) {\n      background-color: ${props => props.theme.light__green};\n    }\n  }\n`;\n\nexport const TableHeadCell = styled.th`\n  ${border_collapse};\n  ${cellPadding};\n`;\n\nexport const TableCell = styled.td`\n  ${border_collapse};\n  ${cellPadding};\n`;\n\n// Table End\n","import React, { Component } from \"react\";\nimport {\n  TableContainer,\n  Table,\n  Row,\n  TableHead,\n  TableBody,\n  TableHeadCell,\n  TableCell\n} from \"./styles\";\n\nclass TableComponent extends Component {\n  render() {\n    return (\n      <TableContainer>\n        {/* <div>\n        <div classname=\"round\">\n          <input type=\"checkbox\" id=\"value\" />\n          <label for=\"value\"></label>\n        </div>\n      </div> */}\n        <Table>\n          <TableHead>\n            <Row>\n              <TableHeadCell>Name</TableHeadCell>\n              <TableHeadCell>Long/Lat</TableHeadCell>\n              <TableHeadCell>Volume</TableHeadCell>\n            </Row>\n          </TableHead>\n          <TableBody>\n            <Row>\n              <TableCell>Value 1</TableCell>\n              <TableCell>Value 2</TableCell>\n              <TableCell>Value 3</TableCell>\n            </Row>\n            <Row>\n              <TableCell>Value 1</TableCell>\n              <TableCell>Value 2</TableCell>\n              <TableCell>Value 3</TableCell>\n            </Row>\n\n            <Row>\n              <TableCell>Value 1</TableCell>\n              <TableCell>Value 2</TableCell>\n              <TableCell>Value 3</TableCell>\n            </Row>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nexport default TableComponent;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    padding: 0;\n    margin: 0;\n    box-sizing: inherit;\n  }\n\n  body {\n    box-sizing: border-box;\n  }\n\n  svg {\n    height: 25px;\n    width: 25px;\n  }\n`;\n\nexport default GlobalStyles;\n","const mapStyles = [\n  { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\n  { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\n  { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\n  {\n    featureType: \"administrative.locality\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#d59563\" }]\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#d59563\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#263c3f\" }]\n  },\n  {\n    featureType: \"poi.park\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#6b9a76\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#38414e\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#212a37\" }]\n  },\n  {\n    featureType: \"road\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#9ca5b3\" }]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#746855\" }]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [{ color: \"#1f2835\" }]\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#f3d19c\" }]\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#2f3948\" }]\n  },\n  {\n    featureType: \"transit.station\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#d59563\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry\",\n    stylers: [{ color: \"#17263c\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.fill\",\n    stylers: [{ color: \"#515c6d\" }]\n  },\n  {\n    featureType: \"water\",\n    elementType: \"labels.text.stroke\",\n    stylers: [{ color: \"#17263c\" }]\n  }\n];\n\nexport default mapStyles;\n","import styled from \"styled-components\";\n\n// Layout Start\n\nexport const Header = styled.header`\n  padding: 10px 20px;\n  background-color: ${props => props.theme.dark__yellow};\n`;\n\nexport const Main = styled.main`\n  padding: 10px 20px;\n`;\n\nexport const Footer = styled.footer`\n  padding: 10px 20px;\n`;\n\n// Layout End\n","import React, { useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport Theme from \"../constants/Theme\";\n\nimport MapComponent from \"../shared/Map\";\nimport TableComponent from \"../shared/Table\";\n\nimport GlobalStyles from \"../constants/GlobalStyles\";\nimport MapDarkStyle from \"../constants/MapDarkStyle\";\n\nimport { Header, Main, Footer } from \"./styles\";\n\nimport Sprite from \"../assets/sprite.svg\";\n\nconst theme_options = Object.keys(Theme);\n\nfunction App() {\n  const [current_theme, set_theme] = useState(theme_options[0]);\n\n  return (\n    <ThemeProvider theme={Theme[current_theme]}>\n      <GlobalStyles />\n\n      <Header>\n        <svg>\n          <use xlinkHref={`${Sprite}#icon-menu`} />\n        </svg>\n      </Header>\n      <Main>\n        <MapComponent\n          options={{\n            styles: current_theme === theme_options[0] ? {} : MapDarkStyle\n          }}\n        />\n\n        <TableComponent />\n      </Main>\n\n      <Footer>\n        <select value={current_theme} onChange={e => set_theme(e.target.value)}>\n          {theme_options.map(item => (\n            <option key={item} value={item}>\n              {item}\n            </option>\n          ))}\n        </select>\n      </Footer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sprite.f73f6161.svg\";"],"sourceRoot":""}